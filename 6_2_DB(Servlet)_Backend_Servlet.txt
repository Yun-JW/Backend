6_2_DB(Servlet)_Backend_Servlet.txt

@@@ Front Controller Pattern @@@

@ 기존 서블릿 작성 방식의 문제점 @
- 사용자의 요청과 이를 처리하는 Servlet이 1:1로 매칭됨
	요청이 추가될 때마다 매번 새로운 Servlet 생성 필요
	동일한 루틴으로 서블릿 생성 필요(상속, 매서드 재정의 등)
- 개별 서블릿에서 로깅, 예외 처리는 물론 인증, 비즈니스 로직을 함께 처리
	코드의 중복 발생
	서블릿마다 요청 처리 과정이 흩어져 있어 복잡성이 증가하는 유지 보수가 어려워짐
- 애플리케이션이 복잡해지면 개발생산성, 유지보수성에 문제 발생


@ Front Controller @
- 전면에서 모든 요청을 받아들이는 Servlet
- front controller pattern의 장점
	단일 진입점: 모든 요청을 front controller에서 접수하므로 요청 처리의 일관성
	공통 처리 : 모든 작업이 front controller를 거쳐가므로 필요한 전/후 작업(인증, 권한 검사, 로깅 등)읠 일괄 처리 가능
	유연한 확장성 : 새로운 요청 처리를 추가할 때 기존의 구조를 크게 변하지 않고도 쉽게 확장 가능
	코드 간결성 : 여러 개의 Servlet을 만드는 번거로움이 줄고 코드의 가독성도 향상

@요청의 구분@
1. url에 언제나 "특정 작업"을 의미하는 파라미터 추가
	예시) /main?action = gugudan&dan=3
2. 와이드 카드를 이용한 URL 매핑
	/ main/board/* : 일반적으로 업무 도메인 별로 지정된 경로 아래의 모든 요청을 받아들임
	*.do : do와 같은 확장자 기반 요청을 처리하며 경로는 무관
	/ : 매핑되지 않은 요청을 모두 처리한다.

@ Front Controller 작성 @
자료 참조


